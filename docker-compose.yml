---
x-logging:
  &default-logging
  options:
    max-size: "100k"
    max-file: "5"
  driver: json-file

services:
  #=============================================================================
  # http reverse proxy
  #=============================================================================

  traefik:
    image: traefik:latest
    container_name: traefik
    logging: *default-logging
    ports:
      - ${HTTP_PORT:-8080}:${HTTP_PORT:-8080}
      - ${HTTPS_PORT:-8443}:${HTTPS_PORT:-8443}
    labels:
      # register authentik forward proxy middleware
      - traefik.http.middlewares.authentik.forwardAuth.address=http://authentik_server:9000/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.authentik.forwardAuth.trustForwardHeader=true
      - traefik.http.middlewares.authentik.forwardAuth.authResponseHeaders=Authorization,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
      # enable traefik dashboard using authentik middleware
      - traefik.enable=${TRAEFIK_API_ENABLE:-false}
      - traefik.http.routers.api.middlewares=${TRAEFIK_API_ENABLE:+authentik}
      - traefik.http.routers.api.rule=HostRegexp(`traefik.${HTTP_HOST:-127.0.0.1.sslip.io}`, `traefik.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.api.service=api@internal
      - traefik.http.services.api.loadBalancer.server.port=80 # dummy port required in host mode
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL:-}
      - CF_API_KEY=${CF_API_KEY:-}
      - HTTP_HOST=${HTTP_HOST:-}
      - HTTP_PORT=${HTTP_PORT:-}
      - HTTPS_PORT=${HTTPS_PORT:-}
      - HTTPS_REDIRECT_PORT=${HTTPS_REDIRECT_PORT:-}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-}
      - TRAEFIK_API_ENABLE=${TRAEFIK_API_ENABLE:-}
    entrypoint: /bin/sh
    command:
      - -c
      - |-
        # act as a reverse proxy for docker containers with label "traefik.enable=true"
        set -- "$$@" --providers.docker=true
        set -- "$$@" --providers.docker.exposedByDefault=false

        # enable stdout access log
        set -- "$$@" --accessLog=true

        # enable traefik dashboard
        set -- "$$@" --api.dashboard=$${TRAEFIK_API_ENABLE:-false}

        # listen addresses
        set -- "$$@" --entryPoints.web.address=:$${HTTP_PORT:-8080}
        set -- "$$@" --entryPoints.websecure.address=:$${HTTPS_PORT:-8443}

        if [ "$${CF_API_EMAIL:-}" != "" ] && [ "$${CF_API_KEY:-}" != "" ]; then
          # configure letsencrypt acme
          set -- "$$@" --certificatesResolvers.letsencrypt.acme.dnsChallenge=true
          set -- "$$@" --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare
          set -- "$$@" --certificatesResolvers.letsencrypt.acme.email=$${LETSENCRYPT_EMAIL:-$$CF_API_EMAIL}
          set -- "$$@" --certificatesResolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json
        
          # configure letsencrypt default certificate
          set -- "$$@" --entryPoints.websecure.http.tls.certResolver=letsencrypt
          set -- "$$@" --entryPoints.websecure.http.tls.domains[0].main=$${HTTP_HOST:-127.0.0.1.sslip.io}
          set -- "$$@" --entryPoints.websecure.http.tls.domains[0].sans=*.$${HTTP_HOST:-127.0.0.1.sslip.io}

          # redirect http to https
          if [ "$${HTTPS_REDIRECT_PORT:-}" != "" ]; then
            HTTPS_ENTRYPOINT=":$$HTTPS_REDIRECT_PORT"
          else
            HTTPS_ENTRYPOINT="websecure"
          fi
          set -- "$$@" --entryPoints.web.http.redirections.entryPoint.to=$$HTTPS_ENTRYPOINT
          set -- "$$@" --entryPoints.web.http.redirections.entryPoint.scheme=https
        else
          echo 'time="'$(date -Iseconds)'" level=warn msg="CF_API_EMAIL and CF_API_KEY are not set. Continuing without letsencrypt."' >&2
          set -- "$$@" --entryPoints.websecure.http.tls=true
        fi

        # trust insecure certificates
        set -- "$$@" --serversTransport.insecureSkipVerify=true

        # opt out of usage statistics
        set -- "$$@" --global.sendAnonymousUsage=false
        
        # start traefik
        exec /entrypoint.sh "$$@"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik/acme:/etc/traefik/acme
    restart: unless-stopped

  #=============================================================================
  # authentication
  #=============================================================================

  authentik_server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.6.1}
    container_name: authentik_server
    logging: *default-logging
    labels:
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_default
      - traefik.enable=true
      - traefik.http.routers.authentik.rule=HostRegexp(`auth.${HTTP_HOST:-127.0.0.1.sslip.io}`, `auth.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.services.authentik.loadBalancer.server.port=9000
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY?:authentik secret key required}
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRESQL_USER:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:?database password required}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRESQL_NAME:-authentik}
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST:-localhost}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT:-25}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM:-authentik@${LETSENCRYPT_EMAIL:-$CF_API_EMAIL}}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME:-}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD:-}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL_TIMEOUT:-10}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL_USE_SSL:-false}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL_USE_TLS:-false}
    command: server
    networks:
      - authentik_backend
      - default
    volumes:
      - ./share/authentik/flow_background.jpg:/web/dist/assets/images/flow_background.jpg:ro
      - ./config/authentik/media:/media
      - ./config/authentik/templates:/templates
    depends_on:
      - authentik_worker
    restart: unless-stopped

  authentik_worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.6.1}
    container_name: authentik_worker
    logging: *default-logging
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY?:authentik secret key required}
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRESQL_NAME:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:?database password required}
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRESQL_USER:-authentik}
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST:-localhost}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT:-25}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM:-authentik@${LETSENCRYPT_EMAIL:-$CF_API_EMAIL}}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME:-}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD:-}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL_TIMEOUT:-10}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL_USE_SSL:-false}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL_USE_TLS:-false}
    command: worker
    user: root
    networks:
      - authentik_backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/authentik/certs:/certs
      - ./config/authentik/media:/media
      - ./config/authentik/templates:/templates
    depends_on:
      - authentik_redis
      - authentik_postgresql
    restart: unless-stopped

  authentik_redis:
    image: docker.io/library/redis:alpine
    container_name: authentik_redis
    logging: *default-logging
    command: --save 60 1 --loglevel warning
    networks:
      - authentik_backend
    volumes:
      - authentik_redis:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    restart: unless-stopped

  authentik_postgresql:
    image: docker.io/library/postgres:12-alpine
    container_name: authentik_postgresql
    logging: *default-logging
    environment:
      POSTGRES_USER: ${AUTHENTIK_POSTGRESQL_USER:-authentik}
      POSTGRES_PASSWORD: ${AUTHENTIK_POSTGRESQL_PASSWORD:?database password required}
      POSTGRES_DB: ${AUTHENTIK_POSTGRESQL_NAME:-authentik}
    networks:
      - authentik_backend
    volumes:
      - authentik_postgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    restart: unless-stopped

  #=============================================================================
  # media servers
  #=============================================================================

  plex:
    image: linuxserver/plex
    container_name: plex
    logging: *default-logging
    runtime: ${PLEX_RUNTIME:-runc}
    labels:
      - autoheal=true
      - traefik.enable=true
      - traefik.http.routers.plex.rule=HostRegexp(`${HTTP_HOST:-127.0.0.1.sslip.io}`, `{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.services.plex.loadBalancer.server.port=32400
    environment:
      # plex
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
      - VERSION=latest
      # nvidia
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
    ports:
      - ${PLEX_PORT:-32400}:32400
    volumes:
      - ./cache/plex:/transcode
      - ./config/plex:/config
      - ./media:/media
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    healthcheck:
        test:
          - CMD
          - /bin/bash
          - -c
          - curl -fsSL -m5 http://127.0.0.1:32400/web/index.html >/dev/null && ( [[ ! -a /dev/nvidia0 ]] || nvidia-smi >/dev/null )
        interval: 10s
        timeout: 8s
        retries: 3
    restart: unless-stopped

  webrcade:
    image: webrcade/webrcade
    container_name: webrcade
    logging: *default-logging
    platform: linux/amd64
    labels:
      - traefik.enable=true
      - traefik.http.services.webrcade.loadBalancer.server.port=80
      # redirect paths to add a trailing slash if the request does not contain a file extension
      - traefik.http.middlewares.webrcade-slash.redirectRegex.regex=^(.*/[^/.?]+)$$
      - traefik.http.middlewares.webrcade-slash.redirectRegex.replacement=$${1}/
      # internally prefix /play to webrcade service
      - traefik.http.middlewares.webrcade-prefix.addPrefix.prefix=/play
      # create router
      - traefik.http.routers.webrcade.middlewares=webrcade-slash,webrcade-prefix
      - traefik.http.routers.webrcade.rule=HostRegexp(`play.${HTTP_HOST:-127.0.0.1.sslip.io}`, `play.{subdomain:[0-9a-f:.-]+}.sslip.io`)
    environment:
      - HTTP_HOST=${HTTP_HOST:+play.$HTTP_HOST}
      - WEBRCADE_DROPBOX_APP_KEY=${WEBRCADE_DROPBOX_APP_KEY:-}
    entrypoint: /bin/sh
    command:
      - -c
      - |-
        # enable cloud sync by replacing play.webrcade.com dropbox config
        if [ "$${HTTP_HOST:-}" != "" ] && [ "$${WEBRCADE_DROPBOX_APP_KEY:-}" != "" ]; then
          find /var/www/html -type f -regextype awk -regex '.+\.(js(\.map)?|html)$' \
            | xargs grep -l 'play.webrcade.com' \
            | xargs -r sed -i "s/play.webrcade.com/$$HTTP_HOST/g"
          find /var/www/html -type f -regextype awk -regex '.+\.(js(\.map)?|html)$' \
            | xargs grep -l 'xvz6ybh9wta2u30' \
            | xargs -r sed -i "s/xvz6ybh9wta2u30/$$WEBRCADE_DROPBOX_APP_KEY/g"
        fi

        # replace the default feed
        if [ -f /var/www/html/play/content/default-feed.json ]; then
          cp /var/www/html/play/content/default-feed.json /var/www/html/play/default-feed.json
        fi

        # fix mac m1 errors starting apache
        if ! grep -qE '^Mutex' /etc/apache2/apache2.conf; then
          echo "Mutex posixsem" >>/etc/apache2/apache2.conf
        fi

        # execute the webrcade entrypoint
        exec /usr/local/bin/docker-php-entrypoint /home/start.sh "$@"
    volumes:
      - ./config/webrcade:/var/www/html/play/content:ro
    restart: unless-stopped

  kavita:
    image: kizaing/kavita:nightly
    container_name: kavita
    logging: *default-logging
    user: ${PUID:-1000}:${PGID:-1000}
    labels:
      - traefik.enable=true
      - traefik.http.routers.kavita.rule=HostRegexp(`read.${HTTP_HOST:-127.0.0.1.sslip.io}`, `read.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.services.kavita.loadBalancer.server.port=5000
    volumes:
      - ./config/kavita:/kavita/config
      - ./media:/media
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    restart: unless-stopped

  mylar:
    image: linuxserver/mylar3
    container_name: mylar
    logging: *default-logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.mylar.middlewares=authentik
      - traefik.http.routers.mylar.rule=HostRegexp(`mylar.${HTTP_HOST:-127.0.0.1.sslip.io}`, `mylar.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.mylar.service=mylar
      - traefik.http.services.mylar.loadBalancer.server.port=8090
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
    volumes:
      - ./config/mylarr:/config
      - ./media:/media
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    restart: unless-stopped

  #=============================================================================
  # media management
  #=============================================================================

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    logging: *default-logging
    labels:
      - traefik.enable=true
      # use forward auth for frontend access
      - traefik.http.routers.sonarr.middlewares=authentik
      - traefik.http.routers.sonarr.rule=HostRegexp(`sonarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `sonarr.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.services.sonarr.loadBalancer.server.port=8989
      # bypass forward auth for api endpoints
      - traefik.http.routers.sonarr-api.rule=HostRegexp(`sonarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `sonarr.{subdomain:[0-9a-f:.-]+}.sslip.io`) && PathPrefix(`/api`)
      - traefik.http.routers.sonarr-api.service=sonarr-api
      - traefik.http.services.sonarr-api.loadBalancer.server.port=8989
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
      - XDG_CONFIG_HOME=/tmp/xdg
    volumes:
      - ./config/sonarr:/config
      - ./media:/media
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    depends_on:
      - prowlarr
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    logging: *default-logging
    labels:
      - traefik.enable=true
      # use forward auth for frontend access
      - traefik.http.routers.radarr.middlewares=authentik
      - traefik.http.routers.radarr.rule=HostRegexp(`radarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `radarr.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.services.radarr.loadBalancer.server.port=7878
      # bypass forward auth for api endpoints
      - traefik.http.routers.radarr-api.rule=HostRegexp(`radarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `radarr.{subdomain:[0-9a-f:.-]+}.sslip.io`) && PathPrefix(`/api`)
      - traefik.http.routers.radarr-api.service=radarr-api
      - traefik.http.services.radarr-api.loadBalancer.server.port=7878
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
      - XDG_CONFIG_HOME=/tmp/xdg
    volumes:
      - ./config/radarr:/config
      - ./media:/media
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    depends_on:
      - prowlarr
    restart: unless-stopped

  lidarr:
    image: linuxserver/lidarr
    container_name: lidarr
    logging: *default-logging
    labels:
      - traefik.enable=true
      # use forward auth for frontend access
      - traefik.http.routers.lidarr.middlewares=authentik
      - traefik.http.routers.lidarr.rule=HostRegexp(`lidarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `lidarr.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.lidarr.service=lidarr
      - traefik.http.services.lidarr.loadBalancer.server.port=8686
      # bypass forward auth for api endpoints
      - traefik.http.routers.lidarr-api.rule=HostRegexp(`lidarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `lidarr.{subdomain:[0-9a-f:.-]+}.sslip.io`) && PathPrefix(`/api`)
      - traefik.http.routers.lidarr-api.service=lidarr-api
      - traefik.http.services.lidarr-api.loadBalancer.server.port=8686
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
      - XDG_CONFIG_HOME=/tmp/xdg
    volumes:
      - ./config/lidarr:/config
      - ./media:/media
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    depends_on:
      - prowlarr
    restart: unless-stopped

  readarr:
    image: ghcr.io/linuxserver/readarr:nightly
    container_name: readarr
    logging: *default-logging
    labels:
      - traefik.enable=true
      # use forward auth for frontend access
      - traefik.http.routers.readarr.middlewares=authentik
      - traefik.http.routers.readarr.rule=HostRegexp(`readarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `readarr.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.readarr.service=readarr
      - traefik.http.services.readarr.loadBalancer.server.port=8787
      # bypass forward auth for api endpoints
      - traefik.http.routers.readarr-api.rule=HostRegexp(`readarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `readarr.{subdomain:[0-9a-f:.-]+}.sslip.io`) && PathPrefix(`/api`)
      - traefik.http.routers.readarr-api.service=readarr-api
      - traefik.http.services.readarr-api.loadBalancer.server.port=8787
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
      - XDG_CONFIG_HOME=/tmp/xdg
    volumes:
      - ./config/readarr:/config
      - ./media:/media
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    restart: unless-stopped

  overseerr:
    image: linuxserver/overseerr
    container_name: overseerr
    logging: *default-logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.rule=HostRegexp(`requests.${HTTP_HOST:-127.0.0.1.sslip.io}`, `requests.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.services.overseerr.loadBalancer.server.port=5055
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
    volumes:
      - ./config/overseerr:/config
    restart: unless-stopped

  #=============================================================================
  # indexer middleware
  #=============================================================================

  prowlarr:
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    logging: *default-logging
    labels:
      - traefik.enable=true
      # use forward auth for frontend access
      - traefik.http.routers.prowlarr.middlewares=authentik
      - traefik.http.routers.prowlarr.rule=HostRegexp(`prowlarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `prowlarr.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.prowlarr.service=prowlarr
      - traefik.http.services.prowlarr.loadBalancer.server.port=9696
      # bypass forward auth for api endpoints
      - traefik.http.routers.prowlarr-api.rule=HostRegexp(`prowlarr.${HTTP_HOST:-127.0.0.1.sslip.io}`, `prowlarr.{subdomain:[0-9a-f:.-]+}.sslip.io`) && PathPrefix(`/api`)
      - traefik.http.routers.prowlarr-api.service=prowlarr-api
      - traefik.http.services.prowlarr-api.loadBalancer.server.port=9696
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
      - XDG_CONFIG_HOME=/tmp/xdg
    volumes:
      - ./config/prowlarr:/config
    depends_on:
      - vpn
    restart: unless-stopped

  #=============================================================================
  # download clients
  #=============================================================================

  deluge:
    image: linuxserver/deluge
    container_name: deluge
    logging: *default-logging
    network_mode: service:vpn
    entrypoint: /usr/local/bin/init
    labels:
      - autoheal=true
      - traefik.enable=true
      # use forward auth for frontend access
      - traefik.http.routers.deluge.middlewares=authentik
      - traefik.http.routers.deluge.rule=HostRegexp(`deluge.${HTTP_HOST:-127.0.0.1.sslip.io}`, `deluge.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.deluge.service=deluge
      - traefik.http.services.deluge.loadBalancer.server.port=8112
      # bypass forward auth for rpc endpoints
      - traefik.http.routers.deluge-rpc.rule=HostRegexp(`deluge.${HTTP_HOST:-127.0.0.1.sslip.io}`, `deluge.{subdomain:[0-9a-f:.-]+}.sslip.io`) && PathPrefix(`/json`)
      - traefik.http.routers.deluge-rpc.service=deluge-rpc
      - traefik.http.services.deluge-rpc.loadBalancer.server.port=8112
    environment:
      # deluge
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
      - UMASK=002
    volumes:
      - ./config/deluge:/config
      - ./config/vpn:/gluetun:ro
      - ./media:/media
      - ./share/deluge/init:/usr/local/bin/init
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    healthcheck:
        test:
          - CMD
          - /bin/bash
          - -c
          - curl -fsSL -m5 http://127.0.0.1:8112
        interval: 10s
        timeout: 8s
        retries: 3
    depends_on:
      - vpn
    restart: unless-stopped

  nzbget:
    image: linuxserver/nzbget
    container_name: nzbget
    logging: *default-logging
    labels:
      - traefik.enable=true
      # use forward auth for frontend access
      - traefik.http.routers.nzbget.middlewares=authentik
      - traefik.http.routers.nzbget.rule=HostRegexp(`nzbget.${HTTP_HOST:-127.0.0.1.sslip.io}`, `nzbget.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.nzbget.service=nzbget
      - traefik.http.services.nzbget.loadBalancer.server.port=6789
      # bypass forward auth for rpc endpoints
      - traefik.http.routers.nzbget-rpc.rule=HostRegexp(`nzbget.${HTTP_HOST:-127.0.0.1.sslip.io}`, `nzbget.{subdomain:[0-9a-f:.-]+}.sslip.io`) && Path(`/{auth:[^/]+}/jsonrpc`)
      - traefik.http.routers.nzbget-rpc.service=nzbget-rpc
      - traefik.http.services.nzbget-rpc.loadBalancer.server.port=6789
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
    volumes:
      - ./config/nzbget:/config
      - ./media:/media
      # Optional volumes, e.g. to follow symlinks
      - ${EXTRA_DATA_VOL_0:-/dev/null}:${EXTRA_DATA_VOL_0:-/dev/host/null0}
      - ${EXTRA_DATA_VOL_1:-/dev/null}:${EXTRA_DATA_VOL_1:-/dev/host/null1}
      - ${EXTRA_DATA_VOL_2:-/dev/null}:${EXTRA_DATA_VOL_2:-/dev/host/null2}
      - ${EXTRA_DATA_VOL_3:-/dev/null}:${EXTRA_DATA_VOL_3:-/dev/host/null3}
      - ${EXTRA_DATA_VOL_4:-/dev/null}:${EXTRA_DATA_VOL_4:-/dev/host/null4}
      - ${EXTRA_DATA_VOL_5:-/dev/null}:${EXTRA_DATA_VOL_5:-/dev/host/null5}
    restart: unless-stopped

  #=============================================================================
  # stats
  #=============================================================================

  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    logging: *default-logging
    labels:
      - traefik.enable=true
      # use forward auth for frontend access
      - traefik.http.routers.tautulli.middlewares=authentik
      - traefik.http.routers.tautulli.rule=HostRegexp(`tautulli.${HTTP_HOST:-127.0.0.1.sslip.io}`, `tautulli.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.routers.tautulli.service=tautulli
      - traefik.http.services.tautulli.loadBalancer.server.port=8181
      # bypass forward auth for api endpoints
      - traefik.http.routers.tautulli-api.rule=HostRegexp(`tautulli.${HTTP_HOST:-127.0.0.1.sslip.io}`, `tautulli.{subdomain:[0-9a-f:.-]+}.sslip.io`) && PathPrefix(`/api`)
      - traefik.http.routers.tautulli-api.service=tautulli-api
      - traefik.http.services.tautulli-api.loadBalancer.server.port=8181
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
    volumes:
      - ./config/plex/Library/Application Support/Plex Media Server/Logs:/logs
      - ./config/tautulli:/config
    restart: unless-stopped

  #=============================================================================
  # privacy
  #=============================================================================

  vpn:
    image: qmcgaw/gluetun
    container_name: vpn
    logging: *default-logging
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    ports:
      # http-proxy
      - 8888:8888
    environment:
      # private internet access
      - VPN_SERVICE_PROVIDER=private internet access
      - HTTPPROXY=on
      - OPENVPN_USER=$OPENVPN_USERNAME
      - OPENVPN_PASSWORD=$OPENVPN_PASSWORD
      - SERVER_REGIONS=${SERVER_REGIONS:-UK London}
      - VPN_PORT_FORWARDING=on
      - VPN_PORT_FORWARDING_STATUS_FILE=/gluetun/forwarded_port
    volumes:
      - ./config/vpn:/gluetun
    restart: unless-stopped

  #=============================================================================
  # container management
  #=============================================================================

  portainer:
    image: ${PORTAINER_IMAGE:-portainer/portainer-ce}
    container_name: portainer
    logging: *default-logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=HostRegexp(`portainer.${HTTP_HOST:-127.0.0.1.sslip.io}`, `portainer.{subdomain:[0-9a-f:.-]+}.sslip.io`)
      - traefik.http.services.portainer.loadBalancer.server.port=9000
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Europe/London}
      - VERSION=docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/portainer:/data
    restart: unless-stopped

  autoheal:
    image: willfarrell/autoheal
    container_name: autoheal
    logging: *default-logging
    security_opt:
      - no-new-privileges
    environment:
      - AUTOHEAL_CONTAINER_LABEL=autoheal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

networks:
  authentik_backend:

volumes:
  authentik_redis:
  authentik_postgresql:
